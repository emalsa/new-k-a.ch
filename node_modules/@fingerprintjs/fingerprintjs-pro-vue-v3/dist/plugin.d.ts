/**
 * FingerprintJS Pro Vue v1.1.1 - Copyright (c) FingerprintJS, Inc, 2022 (https://fingerprintjs.com)
 * Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.
 */

import { Plugin, InjectionKey, Ref } from 'vue';
import { FpjsClientOptions, FpjsClient, VisitorData, GetOptions } from '@fingerprintjs/fingerprintjs-pro-spa';
export { CacheLocation, Cacheable, ExtendedGetResult, GetOptions, GetResult, ICache, InMemoryCache, LoadOptions, LocalStorageCache, SessionStorageCache, VisitorData } from '@fingerprintjs/fingerprintjs-pro-spa';

/**
 * FingerprintJS Pro plugin
 *
 * @example ```ts
 * import { createApp } from 'vue';
 * import App from './App.vue';
 * import fpjsPlugin, { FpjsVueOptions } from '@fingerprintjs/fingerprintjs-pro-vue-v3';
 *
 * const app = createApp(App);
 *
 * const apiKey = '<YOUR_API_KEY>'
 *
 * app
 *   .use(fpjsPlugin, {
 *     loadOptions: {
 *       apiKey,
 *     },
 *   } as FpjsVueOptions)
 *   .mount('#app');
 * ```
 * */
declare const fpjsPlugin: Plugin;

declare type FpjsVueOptions = FpjsClientOptions;
declare type GetVisitorData = FpjsClient['getVisitorData'];
declare type ClearCache = FpjsClient['clearCache'];
interface FpjsVueGlobalClient {
    getVisitorData: GetVisitorData;
    clearCache: ClearCache;
}
interface FpjsVisitorQueryData<TExtended extends boolean> {
    isLoading: boolean;
    data: VisitorData<TExtended> | undefined;
    error: Error | undefined;
}
interface FpjsVueQueryOptions {
    /**
     * Determines whether the `getData()` method will be called immediately after function is called or not
     *
     * @default true
     */
    immediate?: boolean;
}
interface GetDataOptions {
    /**
     * Determines whether the method should ignore cache
     *
     * @default false
     * */
    ignoreCache?: boolean;
}

declare type FpjsGetVisitorDataMethodThis = {
    $root?: {
        $fpjs?: FpjsVueGlobalClient;
    };
    $fpjs?: FpjsVueGlobalClient;
};
declare type GetVisitorDataMethodParams = Omit<GetOptions<boolean>, 'extendedResult'> & GetDataOptions;
declare type FpjsGetVisitorDataMethod<This = FpjsGetVisitorDataMethodThis> = (this: This, options?: GetVisitorDataMethodParams) => Promise<void>;
interface FpjsVueMixins {
    /**
     * Method for fetching visitor data
     * */
    $getVisitorData: FpjsGetVisitorDataMethod<any>;
    /**
     * Method for fetching extended data
     * */
    $getVisitorDataExtended: FpjsGetVisitorDataMethod<any>;
    /**
     * Query state for visitor data
     * */
    visitorData: FpjsVisitorQueryData<false>;
    /**
     * Query state for extended visitor data
     * */
    visitorDataExtended: FpjsVisitorQueryData<true>;
}

/**
 * Mixin for fetching normal visitorData
 *
 * @example ```vue
 *
 * <script>
 * import { fpjsGetVisitorDataMixin } from '@fingerprintjs/fingerprintjs-pro-vue-v3';
 * //import { fpjsGetVisitorDataMixin } from '@fingerprintjs/fingerprintjs-pro-vue-v2';
 *
 * export default {
 *   // Include our mixin
 *   mixins: [fpjsGetVisitorDataMixin],
 *   async mounted() {
 *     // You can also fetch data on mount
 *     // await this.$getVisitorData();
 *   }
 * };
 * </script>
 *
 * <template>
 *   <div>
 *     <button @click='$getVisitorData'>
 *       Get visitor data
 *     </button>
 *     <span v-if='visitorData.isLoading'>
 *       Loading...
 *     </span>
 *     <span v-else-if='visitorData.isError'>
 *       Error: {{ visitorData.error }}
 *     </span>
 *     <span v-else>
 *       <!--Do something with visitorData here-->
 *     </span>
 *   </div>
 * </template>
 * ```
 * */
declare const fpjsGetVisitorDataMixin: {
    data: () => {
        visitorData: FpjsVisitorQueryData<false>;
    };
    methods: {
        $getVisitorData: FpjsGetVisitorDataMethod<any>;
    };
};
/**
 * Mixin for fetching extended visitorData
 *
 * @example ```vue
 *
 * <script>
 * import { fpjsGetVisitorDataExtendedMixin } from '@fingerprintjs/fingerprintjs-pro-vue-v3';
 * //import { fpjsGetVisitorDataExtendedMixin } from '@fingerprintjs/fingerprintjs-pro-vue-v2';
 *
 * export default {
 *   // Include our mixin
 *   mixins: [fpjsGetVisitorDataExtendedMixin],
 *   async mounted() {
 *     // You can also fetch data on mount
 *     // await this.$getVisitorDataExtended();
 *   }
 * );
 * </script>
 *
 * <template>
 *   <div>
 *     <button @click='$getVisitorDataExtended'>
 *       Get visitor data
 *     </button>
 *     <span v-if='visitorDataExtended.isLoading'>
 *       Loading...
 *     </span>
 *     <span v-else-if='visitorDataExtended.isError'>
 *       Error: {{ visitorDataExtended.error }}
 *     </span>
 *     <span v-else>
 *       <!--Do something with visitorData here-->
 *     </span>
 *   </div>
 * </template>
 * ```
 * */
declare const fpjsGetVisitorDataExtendedMixin: {
    data: () => {
        visitorDataExtended: FpjsVisitorQueryData<true>;
    };
    methods: {
        $getVisitorDataExtended: FpjsGetVisitorDataMethod<any>;
    };
};

declare const GET_VISITOR_DATA: InjectionKey<GetVisitorData>;
declare const CLEAR_CACHE: InjectionKey<ClearCache>;

declare type AsRefs<T> = {
    [K in keyof T]: Ref<T[K]>;
};
declare type UseGetVisitorDataResult<TExtended extends boolean> = AsRefs<FpjsVisitorQueryData<TExtended>> & {
    /**
     * Fetches visitor data.
     * */
    getData: (options?: GetDataOptions) => Promise<VisitorData<TExtended> | undefined>;
};
declare type UseVisitorDataOptions<TExtended extends boolean> = GetOptions<TExtended> & Partial<GetDataOptions>;

/**
 * Composition API for fetching visitorData.
 *
 * @example
 * ```typescript
 *     {
 *       template: '<h1>Hello world</h1>',
 *       setup() {
 *         const { data, getData, isLoading, error } = useVisitorData({ extendedResult: true });
 *
 *         // Fetch data on mount and ignore cache
 *         // const { data, getData, isLoading, error } = useVisitorData({ extendedResult: true, ignoreCache: true }, { immediate: true });
 *       }
 *     }
 * ```
 * */
declare function useVisitorData<TExtended extends boolean>({ ignoreCache: defaultIgnoreCache, ...options }?: UseVisitorDataOptions<TExtended>, { immediate }?: FpjsVueQueryOptions): UseGetVisitorDataResult<TExtended>;

declare module 'vue' {
    interface ComponentCustomProperties extends Partial<FpjsVueMixins> {
        $fpjs: FpjsVueGlobalClient;
    }
}

export { CLEAR_CACHE, ClearCache, FpjsVisitorQueryData, FpjsVueGlobalClient, FpjsVueOptions, FpjsVueQueryOptions, GET_VISITOR_DATA, GetDataOptions, GetVisitorData, UseGetVisitorDataResult, UseVisitorDataOptions, fpjsPlugin as default, fpjsGetVisitorDataExtendedMixin, fpjsGetVisitorDataMixin, fpjsPlugin, useVisitorData };
