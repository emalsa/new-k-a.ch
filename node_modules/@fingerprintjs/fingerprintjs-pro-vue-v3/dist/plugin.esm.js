/**
 * FingerprintJS Pro Vue v1.1.1 - Copyright (c) FingerprintJS, Inc, 2022 (https://fingerprintjs.com)
 * Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.
 */

import { FpjsClient } from '@fingerprintjs/fingerprintjs-pro-spa';
export { CacheLocation, InMemoryCache, LocalStorageCache, SessionStorageCache } from '@fingerprintjs/fingerprintjs-pro-spa';
import { ref, inject, onMounted } from 'vue';

var version = "1.1.1";

const GET_VISITOR_DATA = Symbol('fpjs-getVisitorData');
const CLEAR_CACHE = Symbol('fpjs-clearCache');

const getOptions = (options, packageName, version) => {
    var _a, _b;
    const clientOptions = Object.assign(Object.assign({}, options), { loadOptions: Object.assign(Object.assign({}, options.loadOptions), { integrationInfo: [...((_b = (_a = options.loadOptions) === null || _a === void 0 ? void 0 : _a.integrationInfo) !== null && _b !== void 0 ? _b : []), `${packageName}/${version}`] }) });
    return clientOptions;
};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function makeClientMethods(client) {
    const initPromise = client.init();
    const getVisitorData = (agentOptions, ignoreCache) => __awaiter(this, void 0, void 0, function* () {
        if (typeof window === 'undefined') {
            throw new Error('getVisitorData() can only be called in the browser. If you are using nuxt, you should apply our plugin only on client side.');
        }
        yield initPromise;
        return client.getVisitorData(agentOptions, ignoreCache);
    });
    const clearCache = client.clearCache.bind(client);
    return {
        clearCache,
        getVisitorData,
    };
}

/**
 * FingerprintJS Pro plugin
 *
 * @example ```ts
 * import { createApp } from 'vue';
 * import App from './App.vue';
 * import fpjsPlugin, { FpjsVueOptions } from '@fingerprintjs/fingerprintjs-pro-vue-v3';
 *
 * const app = createApp(App);
 *
 * const apiKey = '<YOUR_API_KEY>'
 *
 * app
 *   .use(fpjsPlugin, {
 *     loadOptions: {
 *       apiKey,
 *     },
 *   } as FpjsVueOptions)
 *   .mount('#app');
 * ```
 * */
const fpjsPlugin = {
    install: (app, options) => {
        const client = new FpjsClient(getOptions(options, 'fingerprintjs-pro-vue-v3', version));
        const { getVisitorData, clearCache } = makeClientMethods(client);
        app.provide(GET_VISITOR_DATA, getVisitorData);
        app.provide(CLEAR_CACHE, clearCache);
        app.config.globalProperties.$fpjs = {
            getVisitorData,
            clearCache,
        };
    },
};

function setMixinData(dataName, key, value) {
    this.$data[dataName][key] = value;
}
function createMixin(extended) {
    const suffix = extended ? 'Extended' : '';
    const dataName = extended ? 'visitorDataExtended' : 'visitorData';
    const methodName = `$getVisitorData${suffix}`;
    const getVisitorData = function (options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            /**
             * We use this.$root as a fallback, because in nuxt sometimes this.$fpjs might be empty, but it might exist in $root
             * */
            const fpjs = (_a = this.$fpjs) !== null && _a !== void 0 ? _a : (_b = this.$root) === null || _b === void 0 ? void 0 : _b.$fpjs;
            const boundSetData = setMixinData.bind(this);
            const setData = (key, value) => {
                return boundSetData(dataName, key, value);
            };
            if (!fpjs) {
                throw new TypeError('$fpjs is not defined.');
            }
            try {
                setData('isLoading', true);
                setData('data', yield fpjs.getVisitorData(Object.assign(Object.assign({}, (options !== null && options !== void 0 ? options : {})), { extendedResult: extended }), options === null || options === void 0 ? void 0 : options.ignoreCache));
            }
            catch (error) {
                setData('error', error);
            }
            finally {
                setData('isLoading', false);
            }
        });
    };
    return {
        data() {
            return {
                [dataName]: {
                    isLoading: false,
                    data: undefined,
                    error: undefined,
                },
            };
        },
        methods: {
            [methodName]: getVisitorData,
        },
    };
}
/**
 * Mixin for fetching normal visitorData
 *
 * @example ```vue
 *
 * <script>
 * import { fpjsGetVisitorDataMixin } from '@fingerprintjs/fingerprintjs-pro-vue-v3';
 * //import { fpjsGetVisitorDataMixin } from '@fingerprintjs/fingerprintjs-pro-vue-v2';
 *
 * export default {
 *   // Include our mixin
 *   mixins: [fpjsGetVisitorDataMixin],
 *   async mounted() {
 *     // You can also fetch data on mount
 *     // await this.$getVisitorData();
 *   }
 * };
 * </script>
 *
 * <template>
 *   <div>
 *     <button @click='$getVisitorData'>
 *       Get visitor data
 *     </button>
 *     <span v-if='visitorData.isLoading'>
 *       Loading...
 *     </span>
 *     <span v-else-if='visitorData.isError'>
 *       Error: {{ visitorData.error }}
 *     </span>
 *     <span v-else>
 *       <!--Do something with visitorData here-->
 *     </span>
 *   </div>
 * </template>
 * ```
 * */
const fpjsGetVisitorDataMixin = createMixin(false);
/**
 * Mixin for fetching extended visitorData
 *
 * @example ```vue
 *
 * <script>
 * import { fpjsGetVisitorDataExtendedMixin } from '@fingerprintjs/fingerprintjs-pro-vue-v3';
 * //import { fpjsGetVisitorDataExtendedMixin } from '@fingerprintjs/fingerprintjs-pro-vue-v2';
 *
 * export default {
 *   // Include our mixin
 *   mixins: [fpjsGetVisitorDataExtendedMixin],
 *   async mounted() {
 *     // You can also fetch data on mount
 *     // await this.$getVisitorDataExtended();
 *   }
 * );
 * </script>
 *
 * <template>
 *   <div>
 *     <button @click='$getVisitorDataExtended'>
 *       Get visitor data
 *     </button>
 *     <span v-if='visitorDataExtended.isLoading'>
 *       Loading...
 *     </span>
 *     <span v-else-if='visitorDataExtended.isError'>
 *       Error: {{ visitorDataExtended.error }}
 *     </span>
 *     <span v-else>
 *       <!--Do something with visitorData here-->
 *     </span>
 *   </div>
 * </template>
 * ```
 * */
const fpjsGetVisitorDataExtendedMixin = createMixin(true);

/**
 * Composition API for fetching visitorData.
 *
 * @example
 * ```typescript
 *     {
 *       template: '<h1>Hello world</h1>',
 *       setup() {
 *         const { data, getData, isLoading, error } = useVisitorData({ extendedResult: true });
 *
 *         // Fetch data on mount and ignore cache
 *         // const { data, getData, isLoading, error } = useVisitorData({ extendedResult: true, ignoreCache: true }, { immediate: true });
 *       }
 *     }
 * ```
 * */
function useVisitorData(_a = {}, _b) {
    var { ignoreCache: defaultIgnoreCache } = _a, options = __rest(_a, ["ignoreCache"]);
    var _c = _b === void 0 ? {} : _b, _d = _c.immediate, immediate = _d === void 0 ? true : _d;
    const data = ref();
    const isLoading = ref(false);
    const currentError = ref();
    const getVisitorData = inject(GET_VISITOR_DATA);
    if (!getVisitorData) {
        throw new Error('GET_VISITOR_DATA inject data is missing, perhaps you forgot to install the plugin first?');
    }
    const getData = (getDataOptions) => __awaiter(this, void 0, void 0, function* () {
        isLoading.value = true;
        const ignoreCache = typeof (getDataOptions === null || getDataOptions === void 0 ? void 0 : getDataOptions.ignoreCache) === 'boolean' ? getDataOptions.ignoreCache : defaultIgnoreCache;
        try {
            const result = yield getVisitorData(options, ignoreCache);
            data.value = result;
            currentError.value = undefined;
            return result;
        }
        catch (error) {
            data.value = undefined;
            if (error instanceof Error) {
                error.message = `${error.name}: ${error.message}`;
                error.name = 'FPJSAgentError';
                currentError.value = error;
            }
            return undefined;
        }
        finally {
            isLoading.value = false;
        }
    });
    onMounted(() => __awaiter(this, void 0, void 0, function* () {
        if (immediate) {
            yield getData();
        }
    }));
    return {
        getData,
        data,
        isLoading,
        error: currentError,
    };
}

export { CLEAR_CACHE, GET_VISITOR_DATA, fpjsPlugin as default, fpjsGetVisitorDataExtendedMixin, fpjsGetVisitorDataMixin, fpjsPlugin, useVisitorData };
